//
//  IPrescriptionStyleKit.swift
//  iPrescription
//
//  Created by Marco Giuseppe Salafia on 30/08/15.
//  Copyright (c) 2015 Stain Software. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class IPrescriptionStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static var textColor: UIColor = UIColor(red: 0.137, green: 0.573, blue: 0.780, alpha: 1.000)
        static var iPrescriptionColor: UIColor = UIColor(red: 0.624, green: 0.988, blue: 0.898, alpha: 1.000)
        static var tutorialColor: UIColor = UIColor(red: 0.949, green: 1.000, blue: 0.969, alpha: 1.000)
        static var drug: UIImage?

        static var imageOfDrugIcon: UIImage?
        static var drugIconTargets: [AnyObject]?
        static var imageOfPrescriptionIcon: UIImage?
        static var prescriptionIconTargets: [AnyObject]?
        static var imageOfDrugDetailIcon: UIImage?
        static var drugDetailIconTargets: [AnyObject]?
        static var imageOfAddNotificationIcon: UIImage?
        static var addNotificationIconTargets: [AnyObject]?
        static var imageOfAllNotificationIcon: UIImage?
        static var allNotificationIconTargets: [AnyObject]?
    }

    //// Colors

    public class var textColor: UIColor { return Cache.textColor }
    public class var iPrescriptionColor: UIColor { return Cache.iPrescriptionColor }
    public class var tutorialColor: UIColor { return Cache.tutorialColor }

    //// Images

    public class var drug: UIImage {
        if Cache.drug == nil {
            Cache.drug = UIImage(named: "drug")!
        }
        return Cache.drug!
    }

    //// Drawing Methods

    public class func drawDrugIcon() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let iPrescriptionShadow = IPrescriptionStyleKit.iPrescriptionColor.colorWithShadow(0.5)

        //// Shadow Declarations
        let shadowIconCell = NSShadow()
        shadowIconCell.shadowColor = iPrescriptionShadow.colorWithAlphaComponent(0.6)
        shadowIconCell.shadowOffset = CGSizeMake(8.1, 16.1)
        shadowIconCell.shadowBlurRadius = 35

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRectMake(49, 51, 512, 512), cornerRadius: 120)
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadowIconCell.shadowOffset, shadowIconCell.shadowBlurRadius, (shadowIconCell.shadowColor as! UIColor).CGColor)
        CGContextBeginTransparencyLayer(context, nil)
        CGContextSaveGState(context)
        rectanglePath.addClip()
        CGContextScaleCTM(context, 1, -1)
        CGContextDrawTiledImage(context, CGRectMake(49, -45, IPrescriptionStyleKit.drug.size.width, IPrescriptionStyleKit.drug.size.height), IPrescriptionStyleKit.drug.CGImage)
        CGContextRestoreGState(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        IPrescriptionStyleKit.textColor.setStroke()
        rectanglePath.lineWidth = 9
        rectanglePath.stroke()
    }

    public class func drawPrescriptionIcon() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let iPrescriptionShadow = IPrescriptionStyleKit.iPrescriptionColor.colorWithShadow(0.5)

        //// Shadow Declarations
        let shadowIconCell = NSShadow()
        shadowIconCell.shadowColor = iPrescriptionShadow.colorWithAlphaComponent(0.6)
        shadowIconCell.shadowOffset = CGSizeMake(8.1, 16.1)
        shadowIconCell.shadowBlurRadius = 35

        //// Image Declarations
        let prescription = UIImage(named: "prescription.png")!

        //// Rectangle Drawing
        var rectanglePath = UIBezierPath(roundedRect: CGRectMake(49, 51, 512, 512), byRoundingCorners: [UIRectCorner.TopRight, UIRectCorner.BottomLeft], cornerRadii: CGSizeMake(120, 120))
        rectanglePath.closePath()
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadowIconCell.shadowOffset, shadowIconCell.shadowBlurRadius, (shadowIconCell.shadowColor as! UIColor).CGColor)
        CGContextBeginTransparencyLayer(context, nil)
        CGContextSaveGState(context)
        rectanglePath.addClip()
        CGContextScaleCTM(context, 1, -1)
        CGContextDrawTiledImage(context, CGRectMake(49, -45, prescription.size.width, prescription.size.height), prescription.CGImage)
        CGContextRestoreGState(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        IPrescriptionStyleKit.textColor.setStroke()
        rectanglePath.lineWidth = 9
        rectanglePath.stroke()
    }

    public class func drawDrugDetailIcon() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let iPrescriptionShadow = IPrescriptionStyleKit.iPrescriptionColor.colorWithShadow(0.5)

        //// Shadow Declarations
        let shadowIconCell = NSShadow()
        shadowIconCell.shadowColor = iPrescriptionShadow.colorWithAlphaComponent(0.6)
        shadowIconCell.shadowOffset = CGSizeMake(8.1, 16.1)
        shadowIconCell.shadowBlurRadius = 35

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRectMake(49, 51, 512, 512))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadowIconCell.shadowOffset, shadowIconCell.shadowBlurRadius, (shadowIconCell.shadowColor as! UIColor).CGColor)
        CGContextBeginTransparencyLayer(context, nil)
        CGContextSaveGState(context)
        rectanglePath.addClip()
        CGContextScaleCTM(context, 1, -1)
        CGContextDrawTiledImage(context, CGRectMake(49, -45, IPrescriptionStyleKit.drug.size.width, IPrescriptionStyleKit.drug.size.height), IPrescriptionStyleKit.drug.CGImage)
        CGContextRestoreGState(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        IPrescriptionStyleKit.textColor.setStroke()
        rectanglePath.lineWidth = 9
        rectanglePath.stroke()
    }

    public class func drawAddNotificationIcon() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let iPrescriptionShadow = IPrescriptionStyleKit.iPrescriptionColor.colorWithShadow(0.5)

        //// Shadow Declarations
        let shadowDetailCommandIcon = NSShadow()
        shadowDetailCommandIcon.shadowColor = iPrescriptionShadow
        shadowDetailCommandIcon.shadowOffset = CGSizeMake(3.1, 3.1)
        shadowDetailCommandIcon.shadowBlurRadius = 5

        //// Image Declarations
        let add_notification = UIImage(named: "add_notification.png")!

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRectMake(12.5, 12.5, 256, 256), cornerRadius: 50)
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadowDetailCommandIcon.shadowOffset, shadowDetailCommandIcon.shadowBlurRadius, (shadowDetailCommandIcon.shadowColor as! UIColor).CGColor)
        CGContextBeginTransparencyLayer(context, nil)
        CGContextSaveGState(context)
        rectanglePath.addClip()
        CGContextScaleCTM(context, 1, -1)
        CGContextDrawTiledImage(context, CGRectMake(13, -13, add_notification.size.width, add_notification.size.height), add_notification.CGImage)
        CGContextRestoreGState(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        IPrescriptionStyleKit.textColor.setStroke()
        rectanglePath.lineWidth = 7
        rectanglePath.stroke()
    }

    public class func drawAllNotificationIcon() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let iPrescriptionShadow = IPrescriptionStyleKit.iPrescriptionColor.colorWithShadow(0.5)

        //// Shadow Declarations
        let shadowDetailCommandIcon = NSShadow()
        shadowDetailCommandIcon.shadowColor = iPrescriptionShadow
        shadowDetailCommandIcon.shadowOffset = CGSizeMake(3.1, 3.1)
        shadowDetailCommandIcon.shadowBlurRadius = 5

        //// Image Declarations
        let all_notification = UIImage(named: "all_notification.png")!

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRectMake(12.5, 12.5, 256, 256), cornerRadius: 50)
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadowDetailCommandIcon.shadowOffset, shadowDetailCommandIcon.shadowBlurRadius, (shadowDetailCommandIcon.shadowColor as! UIColor).CGColor)
        CGContextBeginTransparencyLayer(context, nil)
        CGContextSaveGState(context)
        rectanglePath.addClip()
        CGContextScaleCTM(context, 1, -1)
        CGContextDrawTiledImage(context, CGRectMake(13, -13, all_notification.size.width, all_notification.size.height), all_notification.CGImage)
        CGContextRestoreGState(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        IPrescriptionStyleKit.textColor.setStroke()
        rectanglePath.lineWidth = 7
        rectanglePath.stroke()
    }

    //// Generated Images

    public class var imageOfDrugIcon: UIImage {
        if Cache.imageOfDrugIcon != nil {
            return Cache.imageOfDrugIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(612, 612), false, 0)
            IPrescriptionStyleKit.drawDrugIcon()

        Cache.imageOfDrugIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfDrugIcon!
    }

    public class var imageOfPrescriptionIcon: UIImage {
        if Cache.imageOfPrescriptionIcon != nil {
            return Cache.imageOfPrescriptionIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(612, 612), false, 0)
            IPrescriptionStyleKit.drawPrescriptionIcon()

        Cache.imageOfPrescriptionIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfPrescriptionIcon!
    }

    public class var imageOfDrugDetailIcon: UIImage {
        if Cache.imageOfDrugDetailIcon != nil {
            return Cache.imageOfDrugDetailIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(612, 612), false, 0)
            IPrescriptionStyleKit.drawDrugDetailIcon()

        Cache.imageOfDrugDetailIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfDrugDetailIcon!
    }

    public class var imageOfAddNotificationIcon: UIImage {
        if Cache.imageOfAddNotificationIcon != nil {
            return Cache.imageOfAddNotificationIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(280, 280), false, 0)
            IPrescriptionStyleKit.drawAddNotificationIcon()

        Cache.imageOfAddNotificationIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfAddNotificationIcon!
    }

    public class var imageOfAllNotificationIcon: UIImage {
        if Cache.imageOfAllNotificationIcon != nil {
            return Cache.imageOfAllNotificationIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(280, 280), false, 0)
            IPrescriptionStyleKit.drawAllNotificationIcon()

        Cache.imageOfAllNotificationIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfAllNotificationIcon!
    }

    //// Customization Infrastructure

    @IBOutlet var drugIconTargets: [AnyObject]! {
        get { return Cache.drugIconTargets }
        set {
            Cache.drugIconTargets = newValue
            for target: AnyObject in newValue {
                target.setImage(IPrescriptionStyleKit.imageOfDrugIcon)
            }
        }
    }

    @IBOutlet var prescriptionIconTargets: [AnyObject]! {
        get { return Cache.prescriptionIconTargets }
        set {
            Cache.prescriptionIconTargets = newValue
            for target: AnyObject in newValue {
                target.setImage(IPrescriptionStyleKit.imageOfPrescriptionIcon)
            }
        }
    }

    @IBOutlet var drugDetailIconTargets: [AnyObject]! {
        get { return Cache.drugDetailIconTargets }
        set {
            Cache.drugDetailIconTargets = newValue
            for target: AnyObject in newValue {
                target.setImage(IPrescriptionStyleKit.imageOfDrugDetailIcon)
            }
        }
    }

    @IBOutlet var addNotificationIconTargets: [AnyObject]! {
        get { return Cache.addNotificationIconTargets }
        set {
            Cache.addNotificationIconTargets = newValue
            for target: AnyObject in newValue {
                target.setImage(IPrescriptionStyleKit.imageOfAddNotificationIcon)
            }
        }
    }

    @IBOutlet var allNotificationIconTargets: [AnyObject]! {
        get { return Cache.allNotificationIconTargets }
        set {
            Cache.allNotificationIconTargets = newValue
            for target: AnyObject in newValue {
                target.setImage(IPrescriptionStyleKit.imageOfAllNotificationIcon)
            }
        }
    }

}



extension UIColor {
    func colorWithHue(newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    func colorWithSaturation(newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    func colorWithBrightness(newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    func colorWithAlpha(newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, brightness: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    func colorWithHighlight(highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    func colorWithShadow(shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
}

@objc protocol StyleKitSettableImage {
    func setImage(image: UIImage!)
}

@objc protocol StyleKitSettableSelectedImage {
    func setSelectedImage(image: UIImage!)
}
